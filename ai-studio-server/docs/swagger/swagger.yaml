openapi: 3.0.0
info:
  title: AI Studio Service API
  version: 1.0.0
  description: API documentation for the AI Studio Service
tags:
  - name: Health
    description: API health check operations
  - name: Authentication
    description: User authentication and authorization operations
  - name: Profile
    description: User profile management operations

servers:
  - url: http://localhost:6001/api
    description: Development server
  - url: http://localhost:6005/api
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: User ID
          example: 60d5ec49f8c7d00015f8c7d0
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        loginType:
          type: string
          enum: [email, google]
          example: email
        lastLogin:
          type: string
          format: date-time
          example: 2023-10-27T10:00:00.000Z
      required:
        - name
        - email

    RegisterInput:
      type: object
      properties:
        name:
          type: string
          example: Jane Doe
        email:
          type: string
          format: email
          example: jane.doe@example.com
        password:
          type: string
          format: password
          minLength: 6
          example: password123
        loginType:
          type: string
          enum: [email, google]
          example: email
      required:
        - name
        - email
        - password

    LoginInput:
      type: object
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: password123
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        _id:
          type: string
          example: 60d5ec49f8c7d00015f8c7d0
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        token:
          type: string
          description: JWT token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - _id
        - name
        - email
        - token

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Something went wrong!
        stack:
          type: string
          description: Stack trace (only in development)
      required:
        - message

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterInput"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/schemas/ErrorResponse"
        500:
          $ref: "#/components/schemas/ErrorResponse"

  /auth/login:
    post:
      summary: Authenticate and log in a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        400:
          $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          $ref: "#/components/schemas/ErrorResponse"

  /profile:
    get:
      summary: Get current user profile
      tags:
        - Profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/schemas/ErrorResponse"
        500:
          $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update current user profile
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Jane Doe
                email:
                  type: string
                  format: email
                  example: jane.doe@example.com
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: newpassword123
                currentPassword:
                  type: string
                  format: password
                  example: oldpassword123
              required:
                - currentPassword
      responses:
        200:
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/schemas/ErrorResponse"
        500:
          $ref: "#/components/schemas/ErrorResponse"

  /:
    get:
      summary: Health check endpoint
      tags:
        - Health
      responses:
        200:
          description: API is up and running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: UP
                  timestamp:
                    type: string
                    format: date-time
                    example: 2023-10-27T10:00:00.000Z
        500:
          $ref: "#/components/schemas/ErrorResponse"
